// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emulator.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_emulator_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_emulator_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_emulator_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_emulator_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_emulator_2eproto;
class EmulatorActions;
struct EmulatorActionsDefaultTypeInternal;
extern EmulatorActionsDefaultTypeInternal _EmulatorActions_default_instance_;
class EmulatorActions_BranchFlow;
struct EmulatorActions_BranchFlowDefaultTypeInternal;
extern EmulatorActions_BranchFlowDefaultTypeInternal _EmulatorActions_BranchFlow_default_instance_;
class EmulatorActions_Instruction;
struct EmulatorActions_InstructionDefaultTypeInternal;
extern EmulatorActions_InstructionDefaultTypeInternal _EmulatorActions_Instruction_default_instance_;
class EmulatorActions_MemoryAccess;
struct EmulatorActions_MemoryAccessDefaultTypeInternal;
extern EmulatorActions_MemoryAccessDefaultTypeInternal _EmulatorActions_MemoryAccess_default_instance_;
class NextAction;
struct NextActionDefaultTypeInternal;
extern NextActionDefaultTypeInternal _NextAction_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class NextAction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NextAction) */ {
 public:
  inline NextAction() : NextAction(nullptr) {}
  ~NextAction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NextAction(::google::protobuf::internal::ConstantInitialized);

  inline NextAction(const NextAction& from)
      : NextAction(nullptr, from) {}
  NextAction(NextAction&& from) noexcept
    : NextAction() {
    *this = ::std::move(from);
  }

  inline NextAction& operator=(const NextAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextAction& operator=(NextAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextAction* internal_default_instance() {
    return reinterpret_cast<const NextAction*>(
               &_NextAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NextAction& a, NextAction& b) {
    a.Swap(&b);
  }
  inline void Swap(NextAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextAction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NextAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NextAction& from) {
    NextAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NextAction* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "NextAction";
  }
  protected:
  explicit NextAction(::google::protobuf::Arena* arena);
  NextAction(::google::protobuf::Arena* arena, const NextAction& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumInstructionsFieldNumber = 1,
  };
  // optional int32 num_instructions = 1;
  bool has_num_instructions() const;
  void clear_num_instructions() ;
  ::int32_t num_instructions() const;
  void set_num_instructions(::int32_t value);

  private:
  ::int32_t _internal_num_instructions() const;
  void _internal_set_num_instructions(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:NextAction)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t num_instructions_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_emulator_2eproto;
};// -------------------------------------------------------------------

class EmulatorActions_MemoryAccess final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EmulatorActions.MemoryAccess) */ {
 public:
  inline EmulatorActions_MemoryAccess() : EmulatorActions_MemoryAccess(nullptr) {}
  ~EmulatorActions_MemoryAccess() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmulatorActions_MemoryAccess(::google::protobuf::internal::ConstantInitialized);

  inline EmulatorActions_MemoryAccess(const EmulatorActions_MemoryAccess& from)
      : EmulatorActions_MemoryAccess(nullptr, from) {}
  EmulatorActions_MemoryAccess(EmulatorActions_MemoryAccess&& from) noexcept
    : EmulatorActions_MemoryAccess() {
    *this = ::std::move(from);
  }

  inline EmulatorActions_MemoryAccess& operator=(const EmulatorActions_MemoryAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmulatorActions_MemoryAccess& operator=(EmulatorActions_MemoryAccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmulatorActions_MemoryAccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmulatorActions_MemoryAccess* internal_default_instance() {
    return reinterpret_cast<const EmulatorActions_MemoryAccess*>(
               &_EmulatorActions_MemoryAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EmulatorActions_MemoryAccess& a, EmulatorActions_MemoryAccess& b) {
    a.Swap(&b);
  }
  inline void Swap(EmulatorActions_MemoryAccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmulatorActions_MemoryAccess* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmulatorActions_MemoryAccess* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmulatorActions_MemoryAccess>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmulatorActions_MemoryAccess& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EmulatorActions_MemoryAccess& from) {
    EmulatorActions_MemoryAccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmulatorActions_MemoryAccess* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EmulatorActions.MemoryAccess";
  }
  protected:
  explicit EmulatorActions_MemoryAccess(::google::protobuf::Arena* arena);
  EmulatorActions_MemoryAccess(::google::protobuf::Arena* arena, const EmulatorActions_MemoryAccess& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVaddrFieldNumber = 1,
    kSizeFieldNumber = 2,
    kIsStoreFieldNumber = 3,
  };
  // uint64 vaddr = 1;
  void clear_vaddr() ;
  ::uint64_t vaddr() const;
  void set_vaddr(::uint64_t value);

  private:
  ::uint64_t _internal_vaddr() const;
  void _internal_set_vaddr(::uint64_t value);

  public:
  // uint32 size = 2;
  void clear_size() ;
  ::uint32_t size() const;
  void set_size(::uint32_t value);

  private:
  ::uint32_t _internal_size() const;
  void _internal_set_size(::uint32_t value);

  public:
  // bool is_store = 3;
  void clear_is_store() ;
  bool is_store() const;
  void set_is_store(bool value);

  private:
  bool _internal_is_store() const;
  void _internal_set_is_store(bool value);

  public:
  // @@protoc_insertion_point(class_scope:EmulatorActions.MemoryAccess)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t vaddr_;
    ::uint32_t size_;
    bool is_store_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_emulator_2eproto;
};// -------------------------------------------------------------------

class EmulatorActions_BranchFlow final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EmulatorActions.BranchFlow) */ {
 public:
  inline EmulatorActions_BranchFlow() : EmulatorActions_BranchFlow(nullptr) {}
  ~EmulatorActions_BranchFlow() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmulatorActions_BranchFlow(::google::protobuf::internal::ConstantInitialized);

  inline EmulatorActions_BranchFlow(const EmulatorActions_BranchFlow& from)
      : EmulatorActions_BranchFlow(nullptr, from) {}
  EmulatorActions_BranchFlow(EmulatorActions_BranchFlow&& from) noexcept
    : EmulatorActions_BranchFlow() {
    *this = ::std::move(from);
  }

  inline EmulatorActions_BranchFlow& operator=(const EmulatorActions_BranchFlow& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmulatorActions_BranchFlow& operator=(EmulatorActions_BranchFlow&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmulatorActions_BranchFlow& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmulatorActions_BranchFlow* internal_default_instance() {
    return reinterpret_cast<const EmulatorActions_BranchFlow*>(
               &_EmulatorActions_BranchFlow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EmulatorActions_BranchFlow& a, EmulatorActions_BranchFlow& b) {
    a.Swap(&b);
  }
  inline void Swap(EmulatorActions_BranchFlow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmulatorActions_BranchFlow* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmulatorActions_BranchFlow* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmulatorActions_BranchFlow>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmulatorActions_BranchFlow& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EmulatorActions_BranchFlow& from) {
    EmulatorActions_BranchFlow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmulatorActions_BranchFlow* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EmulatorActions.BranchFlow";
  }
  protected:
  explicit EmulatorActions_BranchFlow(::google::protobuf::Arena* arena);
  EmulatorActions_BranchFlow(::google::protobuf::Arena* arena, const EmulatorActions_BranchFlow& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsMispredictFieldNumber = 1,
  };
  // bool is_mispredict = 1;
  void clear_is_mispredict() ;
  bool is_mispredict() const;
  void set_is_mispredict(bool value);

  private:
  bool _internal_is_mispredict() const;
  void _internal_set_is_mispredict(bool value);

  public:
  // @@protoc_insertion_point(class_scope:EmulatorActions.BranchFlow)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool is_mispredict_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_emulator_2eproto;
};// -------------------------------------------------------------------

class EmulatorActions_Instruction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EmulatorActions.Instruction) */ {
 public:
  inline EmulatorActions_Instruction() : EmulatorActions_Instruction(nullptr) {}
  ~EmulatorActions_Instruction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmulatorActions_Instruction(::google::protobuf::internal::ConstantInitialized);

  inline EmulatorActions_Instruction(const EmulatorActions_Instruction& from)
      : EmulatorActions_Instruction(nullptr, from) {}
  EmulatorActions_Instruction(EmulatorActions_Instruction&& from) noexcept
    : EmulatorActions_Instruction() {
    *this = ::std::move(from);
  }

  inline EmulatorActions_Instruction& operator=(const EmulatorActions_Instruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmulatorActions_Instruction& operator=(EmulatorActions_Instruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmulatorActions_Instruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmulatorActions_Instruction* internal_default_instance() {
    return reinterpret_cast<const EmulatorActions_Instruction*>(
               &_EmulatorActions_Instruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EmulatorActions_Instruction& a, EmulatorActions_Instruction& b) {
    a.Swap(&b);
  }
  inline void Swap(EmulatorActions_Instruction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmulatorActions_Instruction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmulatorActions_Instruction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmulatorActions_Instruction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmulatorActions_Instruction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EmulatorActions_Instruction& from) {
    EmulatorActions_Instruction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmulatorActions_Instruction* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EmulatorActions.Instruction";
  }
  protected:
  explicit EmulatorActions_Instruction(::google::protobuf::Arena* arena);
  EmulatorActions_Instruction(::google::protobuf::Arena* arena, const EmulatorActions_Instruction& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpcodeFieldNumber = 1,
    kMemoryAccessFieldNumber = 4,
    kBranchFlowFieldNumber = 5,
    kAddrFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // bytes opcode = 1;
  void clear_opcode() ;
  const std::string& opcode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_opcode(Arg_&& arg, Args_... args);
  std::string* mutable_opcode();
  PROTOBUF_NODISCARD std::string* release_opcode();
  void set_allocated_opcode(std::string* value);

  private:
  const std::string& _internal_opcode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_opcode(
      const std::string& value);
  std::string* _internal_mutable_opcode();

  public:
  // optional .EmulatorActions.MemoryAccess memory_access = 4;
  bool has_memory_access() const;
  void clear_memory_access() ;
  const ::EmulatorActions_MemoryAccess& memory_access() const;
  PROTOBUF_NODISCARD ::EmulatorActions_MemoryAccess* release_memory_access();
  ::EmulatorActions_MemoryAccess* mutable_memory_access();
  void set_allocated_memory_access(::EmulatorActions_MemoryAccess* value);
  void unsafe_arena_set_allocated_memory_access(::EmulatorActions_MemoryAccess* value);
  ::EmulatorActions_MemoryAccess* unsafe_arena_release_memory_access();

  private:
  const ::EmulatorActions_MemoryAccess& _internal_memory_access() const;
  ::EmulatorActions_MemoryAccess* _internal_mutable_memory_access();

  public:
  // optional .EmulatorActions.BranchFlow branch_flow = 5;
  bool has_branch_flow() const;
  void clear_branch_flow() ;
  const ::EmulatorActions_BranchFlow& branch_flow() const;
  PROTOBUF_NODISCARD ::EmulatorActions_BranchFlow* release_branch_flow();
  ::EmulatorActions_BranchFlow* mutable_branch_flow();
  void set_allocated_branch_flow(::EmulatorActions_BranchFlow* value);
  void unsafe_arena_set_allocated_branch_flow(::EmulatorActions_BranchFlow* value);
  ::EmulatorActions_BranchFlow* unsafe_arena_release_branch_flow();

  private:
  const ::EmulatorActions_BranchFlow& _internal_branch_flow() const;
  ::EmulatorActions_BranchFlow* _internal_mutable_branch_flow();

  public:
  // uint64 addr = 2;
  void clear_addr() ;
  ::uint64_t addr() const;
  void set_addr(::uint64_t value);

  private:
  ::uint64_t _internal_addr() const;
  void _internal_set_addr(::uint64_t value);

  public:
  // uint32 size = 3;
  void clear_size() ;
  ::uint32_t size() const;
  void set_size(::uint32_t value);

  private:
  ::uint32_t _internal_size() const;
  void _internal_set_size(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:EmulatorActions.Instruction)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr opcode_;
    ::EmulatorActions_MemoryAccess* memory_access_;
    ::EmulatorActions_BranchFlow* branch_flow_;
    ::uint64_t addr_;
    ::uint32_t size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_emulator_2eproto;
};// -------------------------------------------------------------------

class EmulatorActions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EmulatorActions) */ {
 public:
  inline EmulatorActions() : EmulatorActions(nullptr) {}
  ~EmulatorActions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EmulatorActions(::google::protobuf::internal::ConstantInitialized);

  inline EmulatorActions(const EmulatorActions& from)
      : EmulatorActions(nullptr, from) {}
  EmulatorActions(EmulatorActions&& from) noexcept
    : EmulatorActions() {
    *this = ::std::move(from);
  }

  inline EmulatorActions& operator=(const EmulatorActions& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmulatorActions& operator=(EmulatorActions&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmulatorActions& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmulatorActions* internal_default_instance() {
    return reinterpret_cast<const EmulatorActions*>(
               &_EmulatorActions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EmulatorActions& a, EmulatorActions& b) {
    a.Swap(&b);
  }
  inline void Swap(EmulatorActions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmulatorActions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmulatorActions* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmulatorActions>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmulatorActions& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EmulatorActions& from) {
    EmulatorActions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmulatorActions* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "EmulatorActions";
  }
  protected:
  explicit EmulatorActions(::google::protobuf::Arena* arena);
  EmulatorActions(::google::protobuf::Arena* arena, const EmulatorActions& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using MemoryAccess = EmulatorActions_MemoryAccess;
  using BranchFlow = EmulatorActions_BranchFlow;
  using Instruction = EmulatorActions_Instruction;

  // accessors -------------------------------------------------------

  enum : int {
    kInstructionsFieldNumber = 1,
  };
  // repeated .EmulatorActions.Instruction instructions = 1;
  int instructions_size() const;
  private:
  int _internal_instructions_size() const;

  public:
  void clear_instructions() ;
  ::EmulatorActions_Instruction* mutable_instructions(int index);
  ::google::protobuf::RepeatedPtrField< ::EmulatorActions_Instruction >*
      mutable_instructions();
  private:
  const ::google::protobuf::RepeatedPtrField<::EmulatorActions_Instruction>& _internal_instructions() const;
  ::google::protobuf::RepeatedPtrField<::EmulatorActions_Instruction>* _internal_mutable_instructions();
  public:
  const ::EmulatorActions_Instruction& instructions(int index) const;
  ::EmulatorActions_Instruction* add_instructions();
  const ::google::protobuf::RepeatedPtrField< ::EmulatorActions_Instruction >&
      instructions() const;
  // @@protoc_insertion_point(class_scope:EmulatorActions)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::EmulatorActions_Instruction > instructions_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_emulator_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NextAction

// optional int32 num_instructions = 1;
inline bool NextAction::has_num_instructions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void NextAction::clear_num_instructions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_instructions_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t NextAction::num_instructions() const {
  // @@protoc_insertion_point(field_get:NextAction.num_instructions)
  return _internal_num_instructions();
}
inline void NextAction::set_num_instructions(::int32_t value) {
  _internal_set_num_instructions(value);
  // @@protoc_insertion_point(field_set:NextAction.num_instructions)
}
inline ::int32_t NextAction::_internal_num_instructions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_instructions_;
}
inline void NextAction::_internal_set_num_instructions(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_instructions_ = value;
}

// -------------------------------------------------------------------

// EmulatorActions_MemoryAccess

// uint64 vaddr = 1;
inline void EmulatorActions_MemoryAccess::clear_vaddr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vaddr_ = ::uint64_t{0u};
}
inline ::uint64_t EmulatorActions_MemoryAccess::vaddr() const {
  // @@protoc_insertion_point(field_get:EmulatorActions.MemoryAccess.vaddr)
  return _internal_vaddr();
}
inline void EmulatorActions_MemoryAccess::set_vaddr(::uint64_t value) {
  _internal_set_vaddr(value);
  // @@protoc_insertion_point(field_set:EmulatorActions.MemoryAccess.vaddr)
}
inline ::uint64_t EmulatorActions_MemoryAccess::_internal_vaddr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vaddr_;
}
inline void EmulatorActions_MemoryAccess::_internal_set_vaddr(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vaddr_ = value;
}

// uint32 size = 2;
inline void EmulatorActions_MemoryAccess::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.size_ = 0u;
}
inline ::uint32_t EmulatorActions_MemoryAccess::size() const {
  // @@protoc_insertion_point(field_get:EmulatorActions.MemoryAccess.size)
  return _internal_size();
}
inline void EmulatorActions_MemoryAccess::set_size(::uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:EmulatorActions.MemoryAccess.size)
}
inline ::uint32_t EmulatorActions_MemoryAccess::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void EmulatorActions_MemoryAccess::_internal_set_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.size_ = value;
}

// bool is_store = 3;
inline void EmulatorActions_MemoryAccess::clear_is_store() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_store_ = false;
}
inline bool EmulatorActions_MemoryAccess::is_store() const {
  // @@protoc_insertion_point(field_get:EmulatorActions.MemoryAccess.is_store)
  return _internal_is_store();
}
inline void EmulatorActions_MemoryAccess::set_is_store(bool value) {
  _internal_set_is_store(value);
  // @@protoc_insertion_point(field_set:EmulatorActions.MemoryAccess.is_store)
}
inline bool EmulatorActions_MemoryAccess::_internal_is_store() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_store_;
}
inline void EmulatorActions_MemoryAccess::_internal_set_is_store(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_store_ = value;
}

// -------------------------------------------------------------------

// EmulatorActions_BranchFlow

// bool is_mispredict = 1;
inline void EmulatorActions_BranchFlow::clear_is_mispredict() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_mispredict_ = false;
}
inline bool EmulatorActions_BranchFlow::is_mispredict() const {
  // @@protoc_insertion_point(field_get:EmulatorActions.BranchFlow.is_mispredict)
  return _internal_is_mispredict();
}
inline void EmulatorActions_BranchFlow::set_is_mispredict(bool value) {
  _internal_set_is_mispredict(value);
  // @@protoc_insertion_point(field_set:EmulatorActions.BranchFlow.is_mispredict)
}
inline bool EmulatorActions_BranchFlow::_internal_is_mispredict() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_mispredict_;
}
inline void EmulatorActions_BranchFlow::_internal_set_is_mispredict(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_mispredict_ = value;
}

// -------------------------------------------------------------------

// EmulatorActions_Instruction

// bytes opcode = 1;
inline void EmulatorActions_Instruction::clear_opcode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.opcode_.ClearToEmpty();
}
inline const std::string& EmulatorActions_Instruction::opcode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EmulatorActions.Instruction.opcode)
  return _internal_opcode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EmulatorActions_Instruction::set_opcode(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.opcode_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:EmulatorActions.Instruction.opcode)
}
inline std::string* EmulatorActions_Instruction::mutable_opcode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_opcode();
  // @@protoc_insertion_point(field_mutable:EmulatorActions.Instruction.opcode)
  return _s;
}
inline const std::string& EmulatorActions_Instruction::_internal_opcode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.opcode_.Get();
}
inline void EmulatorActions_Instruction::_internal_set_opcode(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.opcode_.Set(value, GetArena());
}
inline std::string* EmulatorActions_Instruction::_internal_mutable_opcode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.opcode_.Mutable( GetArena());
}
inline std::string* EmulatorActions_Instruction::release_opcode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EmulatorActions.Instruction.opcode)
  return _impl_.opcode_.Release();
}
inline void EmulatorActions_Instruction::set_allocated_opcode(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.opcode_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.opcode_.IsDefault()) {
          _impl_.opcode_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EmulatorActions.Instruction.opcode)
}

// uint64 addr = 2;
inline void EmulatorActions_Instruction::clear_addr() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.addr_ = ::uint64_t{0u};
}
inline ::uint64_t EmulatorActions_Instruction::addr() const {
  // @@protoc_insertion_point(field_get:EmulatorActions.Instruction.addr)
  return _internal_addr();
}
inline void EmulatorActions_Instruction::set_addr(::uint64_t value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:EmulatorActions.Instruction.addr)
}
inline ::uint64_t EmulatorActions_Instruction::_internal_addr() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.addr_;
}
inline void EmulatorActions_Instruction::_internal_set_addr(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.addr_ = value;
}

// uint32 size = 3;
inline void EmulatorActions_Instruction::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.size_ = 0u;
}
inline ::uint32_t EmulatorActions_Instruction::size() const {
  // @@protoc_insertion_point(field_get:EmulatorActions.Instruction.size)
  return _internal_size();
}
inline void EmulatorActions_Instruction::set_size(::uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:EmulatorActions.Instruction.size)
}
inline ::uint32_t EmulatorActions_Instruction::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void EmulatorActions_Instruction::_internal_set_size(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.size_ = value;
}

// optional .EmulatorActions.MemoryAccess memory_access = 4;
inline bool EmulatorActions_Instruction::has_memory_access() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.memory_access_ != nullptr);
  return value;
}
inline void EmulatorActions_Instruction::clear_memory_access() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.memory_access_ != nullptr) _impl_.memory_access_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::EmulatorActions_MemoryAccess& EmulatorActions_Instruction::_internal_memory_access() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::EmulatorActions_MemoryAccess* p = _impl_.memory_access_;
  return p != nullptr ? *p : reinterpret_cast<const ::EmulatorActions_MemoryAccess&>(::_EmulatorActions_MemoryAccess_default_instance_);
}
inline const ::EmulatorActions_MemoryAccess& EmulatorActions_Instruction::memory_access() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EmulatorActions.Instruction.memory_access)
  return _internal_memory_access();
}
inline void EmulatorActions_Instruction::unsafe_arena_set_allocated_memory_access(::EmulatorActions_MemoryAccess* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.memory_access_);
  }
  _impl_.memory_access_ = reinterpret_cast<::EmulatorActions_MemoryAccess*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EmulatorActions.Instruction.memory_access)
}
inline ::EmulatorActions_MemoryAccess* EmulatorActions_Instruction::release_memory_access() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::EmulatorActions_MemoryAccess* released = _impl_.memory_access_;
  _impl_.memory_access_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::EmulatorActions_MemoryAccess* EmulatorActions_Instruction::unsafe_arena_release_memory_access() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EmulatorActions.Instruction.memory_access)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::EmulatorActions_MemoryAccess* temp = _impl_.memory_access_;
  _impl_.memory_access_ = nullptr;
  return temp;
}
inline ::EmulatorActions_MemoryAccess* EmulatorActions_Instruction::_internal_mutable_memory_access() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.memory_access_ == nullptr) {
    auto* p = CreateMaybeMessage<::EmulatorActions_MemoryAccess>(GetArena());
    _impl_.memory_access_ = reinterpret_cast<::EmulatorActions_MemoryAccess*>(p);
  }
  return _impl_.memory_access_;
}
inline ::EmulatorActions_MemoryAccess* EmulatorActions_Instruction::mutable_memory_access() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::EmulatorActions_MemoryAccess* _msg = _internal_mutable_memory_access();
  // @@protoc_insertion_point(field_mutable:EmulatorActions.Instruction.memory_access)
  return _msg;
}
inline void EmulatorActions_Instruction::set_allocated_memory_access(::EmulatorActions_MemoryAccess* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::EmulatorActions_MemoryAccess*>(_impl_.memory_access_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::EmulatorActions_MemoryAccess*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.memory_access_ = reinterpret_cast<::EmulatorActions_MemoryAccess*>(value);
  // @@protoc_insertion_point(field_set_allocated:EmulatorActions.Instruction.memory_access)
}

// optional .EmulatorActions.BranchFlow branch_flow = 5;
inline bool EmulatorActions_Instruction::has_branch_flow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.branch_flow_ != nullptr);
  return value;
}
inline void EmulatorActions_Instruction::clear_branch_flow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.branch_flow_ != nullptr) _impl_.branch_flow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::EmulatorActions_BranchFlow& EmulatorActions_Instruction::_internal_branch_flow() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::EmulatorActions_BranchFlow* p = _impl_.branch_flow_;
  return p != nullptr ? *p : reinterpret_cast<const ::EmulatorActions_BranchFlow&>(::_EmulatorActions_BranchFlow_default_instance_);
}
inline const ::EmulatorActions_BranchFlow& EmulatorActions_Instruction::branch_flow() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EmulatorActions.Instruction.branch_flow)
  return _internal_branch_flow();
}
inline void EmulatorActions_Instruction::unsafe_arena_set_allocated_branch_flow(::EmulatorActions_BranchFlow* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.branch_flow_);
  }
  _impl_.branch_flow_ = reinterpret_cast<::EmulatorActions_BranchFlow*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:EmulatorActions.Instruction.branch_flow)
}
inline ::EmulatorActions_BranchFlow* EmulatorActions_Instruction::release_branch_flow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::EmulatorActions_BranchFlow* released = _impl_.branch_flow_;
  _impl_.branch_flow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::EmulatorActions_BranchFlow* EmulatorActions_Instruction::unsafe_arena_release_branch_flow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:EmulatorActions.Instruction.branch_flow)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::EmulatorActions_BranchFlow* temp = _impl_.branch_flow_;
  _impl_.branch_flow_ = nullptr;
  return temp;
}
inline ::EmulatorActions_BranchFlow* EmulatorActions_Instruction::_internal_mutable_branch_flow() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.branch_flow_ == nullptr) {
    auto* p = CreateMaybeMessage<::EmulatorActions_BranchFlow>(GetArena());
    _impl_.branch_flow_ = reinterpret_cast<::EmulatorActions_BranchFlow*>(p);
  }
  return _impl_.branch_flow_;
}
inline ::EmulatorActions_BranchFlow* EmulatorActions_Instruction::mutable_branch_flow() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::EmulatorActions_BranchFlow* _msg = _internal_mutable_branch_flow();
  // @@protoc_insertion_point(field_mutable:EmulatorActions.Instruction.branch_flow)
  return _msg;
}
inline void EmulatorActions_Instruction::set_allocated_branch_flow(::EmulatorActions_BranchFlow* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::EmulatorActions_BranchFlow*>(_impl_.branch_flow_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::EmulatorActions_BranchFlow*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.branch_flow_ = reinterpret_cast<::EmulatorActions_BranchFlow*>(value);
  // @@protoc_insertion_point(field_set_allocated:EmulatorActions.Instruction.branch_flow)
}

// -------------------------------------------------------------------

// EmulatorActions

// repeated .EmulatorActions.Instruction instructions = 1;
inline int EmulatorActions::_internal_instructions_size() const {
  return _internal_instructions().size();
}
inline int EmulatorActions::instructions_size() const {
  return _internal_instructions_size();
}
inline void EmulatorActions::clear_instructions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instructions_.Clear();
}
inline ::EmulatorActions_Instruction* EmulatorActions::mutable_instructions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:EmulatorActions.instructions)
  return _internal_mutable_instructions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::EmulatorActions_Instruction>* EmulatorActions::mutable_instructions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:EmulatorActions.instructions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_instructions();
}
inline const ::EmulatorActions_Instruction& EmulatorActions::instructions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:EmulatorActions.instructions)
  return _internal_instructions().Get(index);
}
inline ::EmulatorActions_Instruction* EmulatorActions::add_instructions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::EmulatorActions_Instruction* _add = _internal_mutable_instructions()->Add();
  // @@protoc_insertion_point(field_add:EmulatorActions.instructions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::EmulatorActions_Instruction>& EmulatorActions::instructions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:EmulatorActions.instructions)
  return _internal_instructions();
}
inline const ::google::protobuf::RepeatedPtrField<::EmulatorActions_Instruction>&
EmulatorActions::_internal_instructions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instructions_;
}
inline ::google::protobuf::RepeatedPtrField<::EmulatorActions_Instruction>*
EmulatorActions::_internal_mutable_instructions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.instructions_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_emulator_2eproto_2epb_2eh
